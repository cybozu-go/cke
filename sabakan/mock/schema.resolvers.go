package mock

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.50

import (
	"context"
	"errors"
	"fmt"
)

// Machine is the resolver for the machine field.
func (r *queryResolver) Machine(ctx context.Context, serial string) (*Machine, error) {
	if m, ok := machines[serial]; ok {
		return m, nil
	}
	return nil, errors.New("not found")
}

// SearchMachines is the resolver for the searchMachines field.
func (r *queryResolver) SearchMachines(ctx context.Context, having *MachineParams, notHaving *MachineParams) ([]*Machine, error) {
	if having == nil {
		if notHaving == nil {
			return []*Machine{machines["m1"], machines["m2"], machines["m3"]}, nil
		}
		return []*Machine{machines["m1"], machines["m3"]}, nil
	}

	if len(having.Labels) == 1 {
		if having.Labels[0].Name != "foo" {
			return nil, errors.New("wrong label name: " + having.Labels[0].Name)
		}
		if having.Labels[0].Value != "bar" {
			return nil, errors.New("wrong label value: " + having.Labels[0].Value)
		}
		return []*Machine{machines["m3"]}, nil
	}

	if len(having.Racks) == 1 {
		if having.Racks[0] != 1 {
			return nil, fmt.Errorf("wrong rack number: %d", having.Racks[0])
		}
		return []*Machine{machines["m1"]}, nil
	}

	if len(having.Roles) == 1 {
		if having.Roles[0] != "worker" {
			return nil, errors.New("wrong role: " + having.Roles[0])
		}
		return []*Machine{machines["m2"]}, nil
	}

	if len(having.States) == 1 {
		if string(having.States[0]) == "bad" {
			return nil, errors.New("bad state value")
		}
		if having.States[0] != MachineStateUninitialized {
			return nil, errors.New("unexpected state: " + string(having.States[0]))
		}
		return []*Machine{machines["m3"]}, nil
	}

	if having.MinDaysBeforeRetire != nil {
		if *having.MinDaysBeforeRetire != 90 {
			return nil, fmt.Errorf("unexpected days: %d", *having.MinDaysBeforeRetire)
		}
		return []*Machine{machines["m2"]}, nil
	}

	return nil, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
